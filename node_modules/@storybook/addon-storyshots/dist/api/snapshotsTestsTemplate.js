"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _global = require("global");

var _jestSpecificSnapshot = require("jest-specific-snapshot");

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function snapshotTest({
  asyncJest,
  story,
  kind,
  fileName,
  framework,
  testMethod,
  testMethodParams
}) {
  const {
    name
  } = story;
  const context = {
    fileName,
    kind,
    story: name,
    framework
  };

  if (asyncJest === true) {
    (0, _global.it)(name, done => testMethod(_objectSpread({
      done,
      story,
      context
    }, testMethodParams)));
  } else {
    (0, _global.it)(name, () => testMethod(_objectSpread({
      story,
      context
    }, testMethodParams)));
  }
}

function snapshotTestSuite(_ref) {
  let {
    kind,
    stories,
    suite,
    storyNameRegex
  } = _ref,
      restParams = _objectWithoutProperties(_ref, ["kind", "stories", "suite", "storyNameRegex"]);

  (0, _global.describe)(suite, () => {
    (0, _global.describe)(kind, () => {
      // eslint-disable-next-line
      for (const story of stories) {
        if (storyNameRegex && !story.name.match(storyNameRegex)) {
          // eslint-disable-next-line
          continue;
        }

        snapshotTest(_objectSpread({
          story,
          kind
        }, restParams));
      }
    });
  });
}

function snapshotsTests(_ref2) {
  let {
    groups,
    storyKindRegex,
    snapshotSerializers
  } = _ref2,
      restParams = _objectWithoutProperties(_ref2, ["groups", "storyKindRegex", "snapshotSerializers"]);

  if (snapshotSerializers) {
    snapshotSerializers.forEach(serializer => {
      (0, _jestSpecificSnapshot.addSerializer)(serializer);
      expect.addSnapshotSerializer(serializer);
    });
  } // eslint-disable-next-line


  for (const group of groups) {
    const {
      fileName,
      kind,
      stories
    } = group;

    if (storyKindRegex && !kind.match(storyKindRegex)) {
      // eslint-disable-next-line
      continue;
    }

    snapshotTestSuite(_objectSpread({
      stories,
      kind,
      fileName
    }, restParams));
  }
}

var _default = snapshotsTests;
exports.default = _default;