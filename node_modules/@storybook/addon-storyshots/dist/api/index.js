"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _global = _interopRequireWildcard(require("global"));

var _addons = _interopRequireWildcard(require("@storybook/addons"));

var _ensureOptionsDefaults = _interopRequireDefault(require("./ensureOptionsDefaults"));

var _snapshotsTestsTemplate = _interopRequireDefault(require("./snapshotsTestsTemplate"));

var _integrityTestTemplate = _interopRequireDefault(require("./integrityTestTemplate"));

var _frameworkLoader = _interopRequireDefault(require("../frameworks/frameworkLoader"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

_global.default.STORYBOOK_REACT_CLASSES = _global.default.STORYBOOK_REACT_CLASSES || {};
const methods = ['beforeAll', 'beforeEach', 'afterEach', 'afterAll'];

function callTestMethodGlobals(testMethod) {
  methods.forEach(method => {
    if (typeof testMethod[method] === 'function') {
      _global.default[method](testMethod[method]);
    }
  });
}

function testStorySnapshots(options = {}) {
  if (typeof _global.describe !== 'function') {
    throw new Error('testStorySnapshots is intended only to be used inside jest');
  }

  _addons.default.setChannel((0, _addons.mockChannel)());

  const {
    storybook,
    framework,
    renderTree,
    renderShallowTree
  } = (0, _frameworkLoader.default)(options);
  const storiesGroups = storybook.getStorybook();

  if (storiesGroups.length === 0) {
    throw new Error('storyshots found 0 stories');
  }

  const {
    asyncJest,
    suite,
    storyNameRegex,
    storyKindRegex,
    stories2snapsConverter,
    testMethod,
    integrityOptions,
    snapshotSerializers
  } = (0, _ensureOptionsDefaults.default)(options);
  const testMethodParams = {
    renderTree,
    renderShallowTree,
    stories2snapsConverter
  };
  callTestMethodGlobals(testMethod);
  (0, _snapshotsTestsTemplate.default)({
    groups: storiesGroups,
    asyncJest,
    suite,
    framework,
    storyKindRegex,
    storyNameRegex,
    testMethod,
    testMethodParams,
    snapshotSerializers
  });
  (0, _integrityTestTemplate.default)(integrityOptions, stories2snapsConverter);
}

var _default = testStorySnapshots;
exports.default = _default;